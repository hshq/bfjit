|.arch x64
|.actionlist actions
|
|// Use rbx as our cell pointer.
|// Since rbx is a callee-save register, it will be preserved
|// across our calls to getchar and putchar.
|.define PTR, rbx
|
| // Macro for calling a function.
| // In cases where our target is <=2**32 away we can use
| //   | call &addr
| // But since we don't know if it will be, we use this safe
| // sequence instead.
|.macro callp, addr
|  mov64  rax, (uintptr_t)addr
|  call   rax
|.endmacro

#define Dst &state

static void codegen(program_t *program, dasm_State *state, byte *pc) {
  unsigned *loop_stack = program->loop_stack;
  int loop_stack_index = 0;
  unsigned int max_label = 1;
  unsigned int end_label = 0;

  static const void *labels [BC_NUM_BYTECODES] = {
    [BC_SHIFT] = &&bc_shift, [BC_ADD] = &&bc_add,
    [BC_OUTPUT] = &&bc_output, [BC_INPUT] = &&bc_input,
    [BC_LOOP_BEGIN] = &&bc_loop_begin,
    [BC_LOOP_END] = &&bc_loop_end,
    [BC_ZERO] = &&bc_zero, [BC_MOVE_VALUE] = &&bc_move_value,
    [BC_HLT] = &&bc_hlt, [BC_COMPILED_LOOP] = &&bc_compiled_loop,
  };

#define dispatch(pc) do {                       \
    payload = get_payload(pc, 0);               \
    bytecode = get_bytecode(pc);                \
    goto *labels[bytecode];                     \
  } while(0)

  |  push PTR
  |  mov  PTR, rdi

  uint32_t payload;
  byte bytecode;

  dispatch(pc);

bc_shift:
  | add PTR, payload
  pc += get_total_length(BC_SHIFT);
  dispatch(pc);

bc_add:
  | add byte [PTR], payload
  pc += get_total_length(BC_ADD);
  dispatch(pc);

bc_zero:
  | mov byte [PTR], 0
  pc += get_total_length(BC_ZERO);
  dispatch(pc);

bc_move_value: {
  int end_label = max_label;
  max_label++;
  dasm_growpc(&state, max_label);

  | cmp byte [PTR], 0
  | je => end_label
  | mov r8b, byte [PTR]
  | add byte [PTR + payload], r8b
  | mov byte [PTR], 0
  |=> end_label:

  pc += get_total_length(BC_MOVE_VALUE);
  dispatch(pc);
}

bc_output:
  | movzx edi, byte [PTR]
  | callp putchar
  pc += get_total_length(BC_OUTPUT);
  dispatch(pc);

bc_input:
  | callp getchar
  | mov byte [PTR], al
  pc += get_total_length(BC_INPUT);
  dispatch(pc);

bc_loop_begin: {
  assert(loop_stack_index < program->loop_nest_size);

  max_label += 2;
  loop_stack[loop_stack_index++] = max_label;
  dasm_growpc(&state, max_label);

  int loop_begin = max_label - 1;
  int loop_end = max_label - 2;

  |=>(loop_begin):
  | cmp byte [PTR], 0
  | je => loop_end

  pc += get_total_length(BC_LOOP_BEGIN);
  dispatch(pc);
}

bc_loop_end: {
  int label_info = loop_stack[--loop_stack_index];
  int loop_begin = label_info - 1;
  int loop_end = label_info - 2;

  | jmp =>loop_begin
  |=> loop_end:

  if (loop_stack_index == 0) goto end_codegen;

  pc += get_total_length(BC_LOOP_END);
  dispatch(pc);
}


bc_compiled_loop: {
  void *compiled_code = program->compiled_code[payload];
  | mov rdi, PTR
  | callp compiled_code
  | mov PTR, rax
  pc += get_payload(pc, 1);
  dispatch(pc);
}

bc_hlt:
  | jmp =>end_label
  pc += get_total_length(BC_HLT);
  dispatch(pc);

end_codegen:

  |=> end_label:
  | mov rax, PTR
  | pop PTR
  | ret
}
